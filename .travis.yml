stages:
        - building_images_part_1
        - building_images_part_2
        - testing_images
sudo: required
language: generic
dist: xenial
branches:
  only:
        - gsoc2019-travis
cache:
  directories:
        - docker_cached
jobs:
  include:
        - stage: building_images_part_1

          ### x86 Docker images
          install:
          - ./.travis/configure_docker.sh #upgrading docker
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
          - docker version #Check Docker 18.09 is installed

          script:
          - while sleep 9m; do echo "=====[ $SECONDS seconds, build-docker still building... ]====="; done & 
          - DOCKER_BUILDKIT=1 docker build . -f docker/debian-ncp/Dockerfile -t ownyourbits/debian-ncp-amd64:latest --pull --build-arg arch=amd64 --build-arg arch_qemu=x86_64 > output
          - sed -i "/innodb_file_format=barracuda/a open_files_limit=65536" lamp.sh
          - DOCKER_BUILDKIT=1 docker build . -f docker/lamp/Dockerfile -t ownyourbits/lamp-amd64:latest --build-arg arch=amd64 > output
          - sed -i '/open_files_limit=65536/d' lamp.sh
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloud/Dockerfile -t ownyourbits/nextcloud-amd64:latest --build-arg arch=amd64 > output
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloudpi/Dockerfile -t ownyourbits/nextcloudpi-amd64:latest --build-arg arch=amd64 > output
          - docker save ownyourbits/nextcloudpi-amd64:latest | gzip -c > docker_cached/ncp-amd64.tar.gz

        - 

          ### armhf Docker images
          install:
          - sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
          - ./.travis/configure_docker.sh #upgrading docker and installing packages for arm architecture
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
          - docker version #Check Docker 18.09 is installed

          script: 
          - while sleep 9m; do echo "=====[ $SECONDS seconds, build-docker still building... ]====="; done &
          - DOCKER_BUILDKIT=1 docker build . -f docker/debian-ncp/Dockerfile -t ownyourbits/debian-ncp-armhf:latest --pull --build-arg arch=armhf --build-arg arch_qemu=arm > output
            #- docker save ownyourbits/debian-ncp-armhf:latest | gzip -c > docker_cached/debian-ncp-armhf.tar.gz
          - sed -i "/innodb_file_format=barracuda/a open_files_limit=65536" lamp.sh
          - DOCKER_BUILDKIT=1 docker build . -f docker/lamp/Dockerfile -t ownyourbits/lamp-armhf:latest --build-arg arch=armhf > output & tail -f output
          - sed -i '/open_files_limit=65536/d' lamp.sh
          - docker save ownyourbits/lamp-armhf:latest | gzip -c > docker_cached/lamp-armhf.tar.gz

        -

          ### arm64v8 Docker images
          install:
          - sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
          - ./.travis/configure_docker.sh #upgrading docker and installing packages for arm architecture
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
          - docker version #Check Docker 18.09 is installed

          script:
          - while sleep 9m; do echo "=====[ $SECONDS seconds, build-docker still building... ]====="; done &
          - DOCKER_BUILDKIT=1 docker build . -f docker/debian-ncp/Dockerfile -t ownyourbits/debian-ncp-arm64v8:latest --build-arg arch=arm64v8 --build-arg arch_qemu=aarch64 > output
          - sed -i "/innodb_file_format=barracuda/a open_files_limit=65536" lamp.sh
          - DOCKER_BUILDKIT=1 docker build . -f docker/lamp/Dockerfile -t ownyourbits/lamp-arm64v8:latest --build-arg arch=arm64v8 > output
          - sed -i '/open_files_limit=65536/d' lamp.sh
          - docker save ownyourbits/lamp-armhf:latest | gzip -c > docker_cached/lamp-arm64v8.tar.gz

        - stage: building_images_part_2
          
          ### armhf Docker images
          install:
          - ./.travis/configure_docker.sh
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
          - ./.travis/arm_arch.sh

          before_script:
          - gzip -dc docker_cached/lamp-armhf.tar.gz | docker load

          script:
          - while sleep 9m; do echo "=====[ $SECONDS seconds, build-docker still building... ]====="; done &
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloud/Dockerfile -t ownyourbits/nextcloud-armhf:latest --build-arg arch=armhf > output
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloudpi/Dockerfile -t ownyourbits/nextcloudpi-armhf:latest --build-arg arch=armhf > output
          - docker save ownyourbits/nextcloudpi-armhf:latest | gzip -c > docker_cached/ncp-armhf.tar.gz

          ### armh64v8 Docker images
          install:
          - ./.travis/configure_docker.sh
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
          - ./.travis/arm_arch.sh
  
          before_script:
          - gzip -dc docker_cached/lamp-arm64v8.tar.gz | docker load

          script:
          - while sleep 9m; do echo "=====[ $SECONDS seconds, build-docker still building... ]====="; done &
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloud/Dockerfile -t ownyourbits/nextcloud-arm64v8:latest --build-arg arch=arm64v8 > output
          - DOCKER_BUILDKIT=1 docker build . -f docker/nextcloudpi/Dockerfile -t ownyourbits/nextcloudpi-arm64v8:latest --build-arg arch=arm64v8 > output
          - docker save ownyourbits/nextcloudpi-arm64v8:latest | gzip -c > docker_cached/ncp-arm64v8.tar.gz

            #        - 
            #          install:
            #          - ./.travis/arm_arch.sh #installing packages for arm architecture
          ### Raspbian rpi
          #          script:
          #          - sed -i "s/create_torrent/#create_torrent/" build-SD-rpi.sh
          #          - sed -i "s/upload_ftp/#upload_ftp/" build-SD-rpi.sh
          #          - while sleep 9m; do echo "=====[ $SECONDS seconds, still building rpi image... ]====="; done &
          #          - ./build-SD-rpi.sh
          #          - ls /tmp

            #  - stage: building_images_part_2
            #        -
            #          before_script:
            #          - ./.travis/main.sh #configuration script for travis machine - upgrading docker and installing packages for arm architecture
            #          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features
            #          - docker version #Check Docker 18.09 is installed

          ### Armbian images
          #          script:
          #          - sed -i "s/create_torrent/#create_torrent/" build-SD-armbian.sh
          #          - sed -i "s/upload_ftp/#upload_ftp/" build-SD-armbian.sh
            #- sed -i "/innodb_file_format=barracuda/a open_files_limit=65536" lamp.sh
            #          - while sleep 9m; do echo "=====[ $SECONDS seconds, still building armbian image... ]====="; done &
            #          - ./build-SD-armbian.sh odroidxu4 OdroidHC2
            #- sed -i '/open_files_limit=65536/d' lamp.sh

        - stage: testing_images

          ### x86 Docker images
          install:
          - ./.travis/configure_docker.sh
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features      
          - export MOZ_HEADLESS=1
          - export SELENIUM_FIREFOX_DRIVER=/home/travis/build/lotcz/zSample/geckodriver
          - sudo apt-get install python3-pip
          - sudo python3 -m pip install selenium
          - wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
          - tar -xvzf geckodriver*
          - chmod +x geckodriver
          - export PATH=$PATH:$PWD
            
          before_script:
          - gzip -dc docker_cached/ncp-amd64.tar.gz | docker load
          - IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
          - docker run -d -p 4443:4443 -p 443:443 -p 80:80 -v ncdata:/data --name nextcloudpi ownyourbits/nextcloudpi-amd64:latest ${IP}

          script:
          - ./tests/activation_tests.py ${IP}
          - sleep 60
          - ./tests/nextcloud_tests.py ${IP}
          - sleep 5
          - ./tests/system_tests.py ncp@${IP}

        -
          ### armhf Docker images
          install:
          - ./.travis/configure_docker.sh
          - ./.travis/arm_arch.sh
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features      
          - export MOZ_HEADLESS=1
          - export SELENIUM_FIREFOX_DRIVER=/home/travis/build/lotcz/zSample/geckodriver
          - sudo apt-get install python3-pip
          - sudo python3 -m pip install selenium
          - wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
          - tar -xvzf geckodriver*
          - chmod +x geckodriver
          - export PATH=$PATH:$PWD
            
          before_script:
          - gzip -dc docker_cached/ncp-armhf.tar.gz | docker load
          - IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
          - docker run -d -p 4443:4443 -p 443:443 -p 80:80 -v ncdata:/data --name nextcloudpi ownyourbits/nextcloudpi-armhf:latest ${IP}

          script:
          - ./tests/activation_tests.py ${IP}
          - sleep 60
          - ./tests/nextcloud_tests.py ${IP}
          - sleep 5
          - ./tests/system_tests.py ncp@${IP} 

        -
          ### arm64v8 Docker images
          install:
          - ./.travis/configure_docker.sh
          - ./.travis/arm_arch.sh
          - export DOCKER_CLI_EXPERIMENTAL=enabled #enable experimental features      
          - export MOZ_HEADLESS=1
          - export SELENIUM_FIREFOX_DRIVER=/home/travis/build/lotcz/zSample/geckodriver
          - sudo apt-get install python3-pip
          - sudo python3 -m pip install selenium
          - wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
          - tar -xvzf geckodriver*
          - chmod +x geckodriver
          - export PATH=$PATH:$PWD
            
          before_script:
          - gzip -dc docker_cached/ncp-arm64v8.tar.gz | docker load
          - IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
          - docker run -d -p 4443:4443 -p 443:443 -p 80:80 -v ncdata:/data --name nextcloudpi ownyourbits/nextcloudpi-arm64v8:latest ${IP}

          script:
          - ./tests/activation_tests.py ${IP}
          - sleep 60
          - ./tests/nextcloud_tests.py ${IP}
          - sleep 5
          - ./tests/system_tests.py ncp@${IP} 
          
notifications:
  email: false
