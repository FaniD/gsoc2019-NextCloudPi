#

---
- hosts: local
  connection: local
  vars:
    dbadmin: ncadmin
    datadir: "{{ lookup('env','DATADIR') }}"
    adminuser: "{{ lookup('env','ADMINUSER') }}"
    adminpass: "{{ lookup('env, 'ADMINPASS') }}"
  tasks:
    - shell: source /usr/local/etc/library.sh && echo "${PHPVER}"
      register: phpver

    - set_fact:
        phpver: "{{ phpver.stdout }}"

    - debug:
        msg: "Setting up a clean Nextcloud instance... wait until message 'NC init done'"

      # checks
    - shell: grep "^requirepass" /etc/redis/redis.conf  | cut -d'' -f2
      register: redispass

    - fail:
        msg: "redis server without a password. Abort"
      when: redispass.stdout == ""
      
      ## RE-CREATE DATABASE TABLE
    - debug:
        msg: "Setting up database..."

    - shell: pgrep -c mysqld &>/dev/null
      register: condition

      # launch mariadb if not already running
    - shell: mysql &
      when: not condition

      # wait for mariadb
    - shell: pgrep -x mysqld &>/dev/null
      register: condition

    - debug:
        msg: "mariaDB process not found. Waiting..."
      when: not condition

    - stat:
        path: /run/mysqld/mysql.sock
      register: socket
      until: socket.stat.exists and socket.stat.issock
      retries: 100
      delay: 0.5
      ignore_errors: yes
      when: not condition

      # workaround to emulate DROP USER IF EXISTS ..;)
    - shell: grep password /root/.my.cnf | sed 's|password=||'
      register: dbpasswd

    - shell: mysql <<EOF
      DROP DATABASE IF EXISTS nextcloud;
      CREATE DATABASE nextcloud
        CHARACTER SET utf8mb4
        COLLATE utf8mb4_general_ci;
      GRANT USAGE ON *.* TO '{{ dbadmin }}'@'localhost' IDENTIFIED BY '{{ dbpasswd.stdout }}';
      DROP USER '{{ dbadmin }}'@'localhost';
      CREATE USER '{{ dbadmin }}'@'localhost' IDENTIFIED BY '{{ dbpasswd.stdout }}';
      GRANT ALL PRIVILEGES ON nextcloud.* TO {{ dbadmin }}@localhost;
      EXIT
      EOF

      ## INITIALIZE NEXTCLOUD
      
      # make sure redis is running first
    - shell: pgrep -c redis-server &>/dev/null
      register: redis

    - stat:
        path: /var/run/redis
      register: redis_dir

    - file:
        path: /var/run/redis
        state: directory
      when: not redis and not redis_dir.stat.exists

    - file:
        path: /var/run/redis
        owner: redis
      when: not redis

    - shell: sudo -u redis redis-server /etc/redis/redis.conf &
      when: not redis

    - stat:
        path: /run/redis/redis.sock
      register: socket
      until: socket.stat.exists and socket.stat.issock
      retries: 100
      delay: 0.5
      ignore_errors: yes

    - debug:
        msg: "Setting up Nextcloud..."

    - file:
        path: /var/www/nextcloud/config/config.php
        state: absent
        force: yes (for -rf)

    - command: chdir:/var/www/nextcloud ncc maintenance:install --database "mysql" --database-name "nextcloud"  --database-user "{{ dbadmin }}" --database-pass " {{ dbpasswd.stdout }}" --admin-user "{{ adminuser }}" --admin-pass "{{ adminpass }}"

      # cron jobs
    - command: chdir:/var/www/nextcloud ncc background:cron

      # redis cache
    - shell: sed -i '$d' /var/www/nextcloud/config/config.php

    - blockinfile:
      path: /var/www/nextcloud/config/config.php
      block: |
          'memcache.local' => '\\OC\\Memcache\\Redis',
          'memcache.locking' => '\\OC\\Memcache\\Redis',
          'redis' =>
          array (
            'host' => '/var/run/redis/redis.sock',
            'port' => 0,
            'timeout' => 0.0,
            'password' => '$REDISPASS',
          ),
       );

     # tmp upload dir
    - shell: echo "/var/www/nextcloud/data/tmp"
      register: uploadtmpdir

    - file:
        path: "{{ uploadtmpdir.stdout }}"
        state: directory

    - file:
        path:  "{{ uploadtmpdir.stdout }}"
        owner: www-data
        group: www-data

    - command: chdir:/var/www/nextcloud ncc config:system:set tempdirectory --value "{{ uploadtmpdir.stdout }}"

    - shell: sed -i "s|^;\?upload_tmp_dir =.*$|upload_tmp_dir = {{ uploadtmpdir.stdout }}|" /etc/php/{{ phpver }}/cli/php.ini

    - shell: sed -i "s|^;\?upload_tmp_dir =.*$|upload_tmp_dir = {{ uploadtmpdir.stdout }}|" /etc/php/{{ phpver }}/fpm/php.ini

    - shell: sed -i "s|^;\?sys_temp_dir =.*$|sys_temp_dir = {{ uploadtmpdir.stdout }}|"     /etc/php/{{ phpver }}/fpm/php.ini

      # 4 Byte UTF8 support
    - command: chdir:/var/www/nextcloud ncc config:system:set mysql.utf8mb4 --type boolean --value="true"

      # Default trusted domain ( only from ncp-config )
    - shell: test -f /usr/local/bin/nextcloud-domain.sh && { test -f /.ncp-image || bash /usr/local/bin/nextcloud-domain.sh }

    - command: chdir:/var/www/nextcloud ncc config:system:set trusted_domains 5 --value="nextcloudpi.local"

      # trusted_domains 6 used by docker
    - command: chdir:/var/www/nextcloud ncc config:system:set trusted_domains 7 --value="nextcloudpi"
    
    - command: chdir:/var/www/nextcloud ncc config:system:set trusted_domains 8 --value="nextcloudpi.lan"
    
      # email
    - command: chdir:/var/www/nextcloud ncc config:system:set mail_smtpmode     --value="sendmail"

    - command: chdir:/var/www/nextcloud ncc config:system:set mail_smtpauthtype --value="LOGIN"
    
    - command: chdir:/var/www/nextcloud ncc config:system:set mail_from_address --value="admin"
    
    - command: chdir:/var/www/nextcloud ncc config:system:set mail_domain       --value="ownyourbits.com"
   
     # NCP theme
    - stat:
        path: /usr/local/etc/logo
      register: logo

    - shell: grep instanceid config/config.php | awk -F "=> " '{ print $2 }' | sed
 "s|[,']||g"
      register: id
      when: logo

    - fail:
        msg: "{{ failed to get ID }}"
      when: logo and id.stdout == ""

    - stat:
        path: /var/www/nextcloud/data/appdata_{{ id.stdout }}/theming/images
      register: images

    - file:
        path: /var/www/nextcloud/data/appdata_{{ id.stdout }}/theming/images
        state: directory
      when: logo and not images.stat.exists

    - copy:
        src: /usr/local/etc/logo
        dest: /var/www/nextcloud/data/appdata_{{ id.stdout }}/theming/images
      when: logo

    - copy:
        src: /usr/local/etc/background
        dest: /var/www/nextcloud/data/appdata_{{ id.stdout }}/theming/images
      when: logo

    - file:
        path: /var/www/nextcloud/data/appdata_{{ id.stdout }}
        owner: www-data
        group: www-data
        recurse: true
      when: logo

    - shell: mysql nextcloud <<EOF
replace into  oc_appconfig values ( 'theming', 'name'          , "NextCloudPi"       
      );
replace into  oc_appconfig values ( 'theming', 'slogan'        , "keep your data clos
e"    );
replace into  oc_appconfig values ( 'theming', 'url'           , "https://ownyourbits
.com" );
replace into  oc_appconfig values ( 'theming', 'logoMime'      , "image/svg+xml"     
      );
replace into  oc_appconfig values ( 'theming', 'backgroundMime', "image/png"         
      );
EOF

      # NCP app
    - copy:
        src: /var/www/ncp-app
        dest: /var/www/nextcloud/apps/nextcloudpi

    - file:
        path: /var/www/nextcloud/apps/nextcloudpi
        owner: www-data
        group: www-data
        recurse: true

    - command: chdir:/var/www/nextcloud ncc app:enable nextcloudpi

      # enable some apps by default
    - command: chdir:/var/www/nextcloud ncc app:install calendar
    - command: chdir:/var/www/nextcloud ncc app:install contacts
    - command: chdir:/var/www/nextcloud ncc app:install notes
    - command: chdir:/var/www/nextcloud ncc app:install tasks
    - command: chdir:/var/www/nextcloud ncc app:install news
    - command: chdir:/var/www/nextcloud ncc app:install previewgenerator

    - command: chdir:/var/www/nextcloud ncc app:enable calendar
    - command: chdir:/var/www/nextcloud ncc app:enable contacts
    - command: chdir:/var/www/nextcloud ncc app:enable notes
    - command: chdir:/var/www/nextcloud ncc app:enable tasks
    - command: chdir:/var/www/nextcloud ncc app:enable news
    - command: chdir:/var/www/nextcloud ncc app:enable previewgenerator
   
      # previews
    - command: chdir:/var/www/nextcloud ncc config:app:set previewgenerator squareSizes --value="32 256"
    - command: chdir:/var/www/nextcloud ncc config:app:set previewgenerator widthSizes  --value="256 384"
    - command: chdir:/var/www/nextcloud ncc config:app:set previewgenerator heightSizes --value="256"
    - command: chdir:/var/www/nextcloud ncc config:system:set preview_max_x --value 2048
    - command: chdir:/var/www/nextcloud ncc config:system:set preview_max_y --value 2048
    - command: chdir:/var/www/nextcloud ncc config:system:set jpeg_quality --value 60

      # other
    - command: chdir:/var/www/nextcloud ncc config:system:set overwriteprotocol --value=https

      # TODO temporary workaround for https://github.com/nextcloud/server/pull/13358
    - command: chdir:/var/www/nextcloud ncc -n db:convert-filecache-bigint
    
    - debug:
        msg: "NC init done"
