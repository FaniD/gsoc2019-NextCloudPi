#

---
- hosts: local
  connection: local
  vars:
    datadir:  "{{ lookup('env','DATADIR') }}"
  tasks:
    - shell: source /usr/local/etc/library.sh && echo "${PHPVER}"
      register: phpver

    - set_fact:
        phpver: "{{ phpver.stdout }}"

      ## CHECKS
    - command: chdir:/var/www/nextcloud sudo -u www-data php occ config:system:get datadirectory
      register: srcdir

    - fail:
        msg: "Error reading data directory. Is NextCloud running and configured?"
      when: not srcdir.stdout

    - stat:
        path: "{{ srcdir.stdout }}"
      register: folder_srcdir

    - fail:
        msg: "data directory {{ srcdir.stdout }} not found"
      when: not (folder_srcdir.stat.exists and folder_srcdir.stat.isdir)

    - debug:
        msg: "INFO: data already there"
      when: srcdir.stdout == datadir

    - meta: end_play
      when: srcdir.stdout == datadir

      # checks
    - shell: dirname "{{ datadir }}"
      register: basedir

    - stat:
        path: "{{ basedir.stdout }}"
      register: folder_basedir

    - fail: 
        msg: "{{ basedir.stdout }} does not exist"
      when: not (folder_basedir.stat.exists and folder_basedir.stat.isdir)

      # If the user chooses the root of the mountpoint, force a folder
    - shell: mountpoint -q "{{ datadir }}"
      register: mountp

    - shell: echo "{{ datadir }}"
      register: basedir
      when: mountp.stdout

    - shell: grep -q -e ext -e btrfs <( stat -fc%T "{{ basedir.stdout }}" )
      register: grep_out

    - fail:
        msg: "Only ext/btrfs filesystems can hold the data directory"
      when: not grep_out

    - shell: sudo -u www-data test -x "{{ basedir.stdout }}"
      register: test_out

    - fail:
        msg: "ERROR: the user www-data does not have access permissions over {{ basedir.stdout }} "
      when: not test_out.stdout

      # backup possibly existing datadir
    - stat:
        path: " {{ datadir }} "
      register: folder_datadir

    - shell: echo "{{ datadir }}-$( date "+%m-%d-%y" )"
      register: bkp
      when: folder_datadir.stat.exists and folder_datadir.stat.isdir

    - debug:
        msg: "INFO: {{ datadir }} is not empty. Creating backup {{ bkp.stdout }}"
      when: folder_datadir.stat.exists and folder_datadir.stat.isdir

    - command: mv "{{ datadir }}" "{{ bkp.stdout }}"
      when: folder_datadir.stat.exists and folder_datadir.stat.isdir

      # COPY
    - command: chdir:/var/www/nextcloud sudo -u www-data php occ maintenance:mode --on

    - debug:
        msg: "moving data directory from {{ srcdir.stdout }} to {{ datadir }}"

      # use subvolumes, if BTRFS  
    - shell: stat -fc%T "{{ basedir.stdout }}"
      register: comp1

    - debug:
        msg: "BTRFS filesystem detected"
      when: comp1.stdout == "btrfs"

    - shell: btrfs subvolume create "{{ datadir }}"
      register: btrfs
      when: comp1.stdout == "btrfs"

    - fail:
      when: (comp1.stdout == "btrfs") && (not btrfs)

      #copy does not support reflink yet so we use shell for cp
    - shell: cp --reflink=auto -raT "{{ srcdir.stdout }}" "{{ datadir }}" 
      register: cp_status

    - fail:
        msg: "Copy failed"
      when: not cp_status.stdout

    - file:
        path: "{{ datadir }}"
        owner: www-data
        group: www-data

      # tmp upload dir
    - stat:
        path: "{{ datadir }}"/tmp
      register: folder_datadirtmp

    - file:
        path: "{{ datadir }}"/tmp
        state: directory
      when: not folder_datadirtmp.stat.exists

    - file:
        path: "{{ datadir }}"/tmp
        owner: www-data
        group: www-data
   
    - command: chdir:/var/www/nextcloud sudo -u www-data php occ config:system:set tempdirectory --value "{{ datadir }}"/tmp

    - shell:  sed -i "s|^;\?upload_tmp_dir =.*$|uploadtmp_dir = {{ datadir }}/tmp|" /etc/php/{{ phpver }}/cli/php.ini

    - shell: sed -i "s|^;\?upload_tmp_dir =.*$|upload_tmp_dir = {{ datadir }}/tmp|" /etc/php/{{ phpver }}/fpm/php.ini

    - shell: sed -i "s|^;\?sys_temp_dir =.*$|sys_temp_dir = {{ datadir }}/tmp|"     /etc/php/{{ phpver }}/fpm/php.ini

      # opcache dir
    - shell: sed -i "s|^opcache.file_cache=.*|opcache.file_cache={{ datadir }}/.opcache|" /etc/php/{{ phpver }}/mods-available/opcache.ini

      # update fail2ban logpath
    - stat:
        path: /etc/fail2ban/jail.local
      register: jail_local

    - shell: sed -i "s|logpath  =.*nextcloud.log|logpath  = {{ datadir }}/nextcloud.log|" /etc/fail2ban/jail.local
      when: jail_local.stat.exists

      # datadir
    - command: chdir:/var/www/nextcloud sudo -u www-data php occ config:system:set datadirectory --value={{ datadir }}

    - command: chdir:/var/www/nextcloud sudo -u www-data php occ config:system:set logfile --value="{{ datadir }}/nextcloud.log"

    - command: chdir:/var/www/nextcloud sudo -u www-data php occ maintenance:mode --off
